/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as AppTweetsRouteImport } from './routes/_app/tweets'
import { Route as AppTrashRouteImport } from './routes/_app/trash'
import { Route as AppTopRouteImport } from './routes/_app/top'
import { Route as AppTootsRouteImport } from './routes/_app/toots'
import { Route as AppStarsRouteImport } from './routes/_app/stars'
import { Route as AppSearchRouteImport } from './routes/_app/search'
import { Route as AppPublicRouteImport } from './routes/_app/public'
import { Route as AppMediaRouteImport } from './routes/_app/media'
import { Route as AppFeedRouteImport } from './routes/_app/feed'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { Route as AppSettingsRouteRouteImport } from './routes/_app/settings/route'
import { Route as PublicSigninIndexRouteImport } from './routes/_public/signin/index'
import { Route as AppTypeTypeRouteImport } from './routes/_app/type.$type'
import { Route as AppTagTagRouteImport } from './routes/_app/tag.$tag'
import { Route as AppSettingsTagsRouteImport } from './routes/_app/settings/tags'
import { Route as AppSettingsIntegrationsRouteImport } from './routes/_app/settings/integrations'
import { Route as AppSettingsAccountRouteImport } from './routes/_app/settings/account'
import { Route as AppNewBookmarkRouteImport } from './routes/_app/new.bookmark'
import { Route as AppCollectionCollectionRouteImport } from './routes/_app/collection.$collection'
import { Route as AppBookmarkIdRouteImport } from './routes/_app/bookmark.$id'
import { Route as AppBookmarkIdEditRouteImport } from './routes/_app/bookmark.$id.edit'

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AppTweetsRoute = AppTweetsRouteImport.update({
  id: '/tweets',
  path: '/tweets',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppTrashRoute = AppTrashRouteImport.update({
  id: '/trash',
  path: '/trash',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppTopRoute = AppTopRouteImport.update({
  id: '/top',
  path: '/top',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppTootsRoute = AppTootsRouteImport.update({
  id: '/toots',
  path: '/toots',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppStarsRoute = AppStarsRouteImport.update({
  id: '/stars',
  path: '/stars',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSearchRoute = AppSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppPublicRoute = AppPublicRouteImport.update({
  id: '/public',
  path: '/public',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMediaRoute = AppMediaRouteImport.update({
  id: '/media',
  path: '/media',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppFeedRoute = AppFeedRouteImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsRouteRoute = AppSettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRouteRoute,
} as any)
const PublicSigninIndexRoute = PublicSigninIndexRouteImport.update({
  id: '/signin/',
  path: '/signin/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AppTypeTypeRoute = AppTypeTypeRouteImport.update({
  id: '/type/$type',
  path: '/type/$type',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppTagTagRoute = AppTagTagRouteImport.update({
  id: '/tag/$tag',
  path: '/tag/$tag',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsTagsRoute = AppSettingsTagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => AppSettingsRouteRoute,
} as any)
const AppSettingsIntegrationsRoute = AppSettingsIntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => AppSettingsRouteRoute,
} as any)
const AppSettingsAccountRoute = AppSettingsAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AppSettingsRouteRoute,
} as any)
const AppNewBookmarkRoute = AppNewBookmarkRouteImport.update({
  id: '/new/bookmark',
  path: '/new/bookmark',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCollectionCollectionRoute = AppCollectionCollectionRouteImport.update({
  id: '/collection/$collection',
  path: '/collection/$collection',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppBookmarkIdRoute = AppBookmarkIdRouteImport.update({
  id: '/bookmark/$id',
  path: '/bookmark/$id',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppBookmarkIdEditRoute = AppBookmarkIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => AppBookmarkIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/settings': typeof AppSettingsRouteRouteWithChildren
  '/dashboard': typeof AppDashboardRoute
  '/feed': typeof AppFeedRoute
  '/media': typeof AppMediaRoute
  '/public': typeof AppPublicRoute
  '/search': typeof AppSearchRoute
  '/stars': typeof AppStarsRoute
  '/toots': typeof AppTootsRoute
  '/top': typeof AppTopRoute
  '/trash': typeof AppTrashRoute
  '/tweets': typeof AppTweetsRoute
  '/': typeof PublicIndexRoute
  '/bookmark/$id': typeof AppBookmarkIdRouteWithChildren
  '/collection/$collection': typeof AppCollectionCollectionRoute
  '/new/bookmark': typeof AppNewBookmarkRoute
  '/settings/account': typeof AppSettingsAccountRoute
  '/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/settings/tags': typeof AppSettingsTagsRoute
  '/tag/$tag': typeof AppTagTagRoute
  '/type/$type': typeof AppTypeTypeRoute
  '/signin': typeof PublicSigninIndexRoute
  '/bookmark/$id/edit': typeof AppBookmarkIdEditRoute
}
export interface FileRoutesByTo {
  '/settings': typeof AppSettingsRouteRouteWithChildren
  '/dashboard': typeof AppDashboardRoute
  '/feed': typeof AppFeedRoute
  '/media': typeof AppMediaRoute
  '/public': typeof AppPublicRoute
  '/search': typeof AppSearchRoute
  '/stars': typeof AppStarsRoute
  '/toots': typeof AppTootsRoute
  '/top': typeof AppTopRoute
  '/trash': typeof AppTrashRoute
  '/tweets': typeof AppTweetsRoute
  '/': typeof PublicIndexRoute
  '/bookmark/$id': typeof AppBookmarkIdRouteWithChildren
  '/collection/$collection': typeof AppCollectionCollectionRoute
  '/new/bookmark': typeof AppNewBookmarkRoute
  '/settings/account': typeof AppSettingsAccountRoute
  '/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/settings/tags': typeof AppSettingsTagsRoute
  '/tag/$tag': typeof AppTagTagRoute
  '/type/$type': typeof AppTypeTypeRoute
  '/signin': typeof PublicSigninIndexRoute
  '/bookmark/$id/edit': typeof AppBookmarkIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_app/settings': typeof AppSettingsRouteRouteWithChildren
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/feed': typeof AppFeedRoute
  '/_app/media': typeof AppMediaRoute
  '/_app/public': typeof AppPublicRoute
  '/_app/search': typeof AppSearchRoute
  '/_app/stars': typeof AppStarsRoute
  '/_app/toots': typeof AppTootsRoute
  '/_app/top': typeof AppTopRoute
  '/_app/trash': typeof AppTrashRoute
  '/_app/tweets': typeof AppTweetsRoute
  '/_public/': typeof PublicIndexRoute
  '/_app/bookmark/$id': typeof AppBookmarkIdRouteWithChildren
  '/_app/collection/$collection': typeof AppCollectionCollectionRoute
  '/_app/new/bookmark': typeof AppNewBookmarkRoute
  '/_app/settings/account': typeof AppSettingsAccountRoute
  '/_app/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/_app/settings/tags': typeof AppSettingsTagsRoute
  '/_app/tag/$tag': typeof AppTagTagRoute
  '/_app/type/$type': typeof AppTypeTypeRoute
  '/_public/signin/': typeof PublicSigninIndexRoute
  '/_app/bookmark/$id/edit': typeof AppBookmarkIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/settings'
    | '/dashboard'
    | '/feed'
    | '/media'
    | '/public'
    | '/search'
    | '/stars'
    | '/toots'
    | '/top'
    | '/trash'
    | '/tweets'
    | '/'
    | '/bookmark/$id'
    | '/collection/$collection'
    | '/new/bookmark'
    | '/settings/account'
    | '/settings/integrations'
    | '/settings/tags'
    | '/tag/$tag'
    | '/type/$type'
    | '/signin'
    | '/bookmark/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/settings'
    | '/dashboard'
    | '/feed'
    | '/media'
    | '/public'
    | '/search'
    | '/stars'
    | '/toots'
    | '/top'
    | '/trash'
    | '/tweets'
    | '/'
    | '/bookmark/$id'
    | '/collection/$collection'
    | '/new/bookmark'
    | '/settings/account'
    | '/settings/integrations'
    | '/settings/tags'
    | '/tag/$tag'
    | '/type/$type'
    | '/signin'
    | '/bookmark/$id/edit'
  id:
    | '__root__'
    | '/_app'
    | '/_public'
    | '/_app/settings'
    | '/_app/dashboard'
    | '/_app/feed'
    | '/_app/media'
    | '/_app/public'
    | '/_app/search'
    | '/_app/stars'
    | '/_app/toots'
    | '/_app/top'
    | '/_app/trash'
    | '/_app/tweets'
    | '/_public/'
    | '/_app/bookmark/$id'
    | '/_app/collection/$collection'
    | '/_app/new/bookmark'
    | '/_app/settings/account'
    | '/_app/settings/integrations'
    | '/_app/settings/tags'
    | '/_app/tag/$tag'
    | '/_app/type/$type'
    | '/_public/signin/'
    | '/_app/bookmark/$id/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_app/tweets': {
      id: '/_app/tweets'
      path: '/tweets'
      fullPath: '/tweets'
      preLoaderRoute: typeof AppTweetsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/trash': {
      id: '/_app/trash'
      path: '/trash'
      fullPath: '/trash'
      preLoaderRoute: typeof AppTrashRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/top': {
      id: '/_app/top'
      path: '/top'
      fullPath: '/top'
      preLoaderRoute: typeof AppTopRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/toots': {
      id: '/_app/toots'
      path: '/toots'
      fullPath: '/toots'
      preLoaderRoute: typeof AppTootsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/stars': {
      id: '/_app/stars'
      path: '/stars'
      fullPath: '/stars'
      preLoaderRoute: typeof AppStarsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/search': {
      id: '/_app/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AppSearchRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/public': {
      id: '/_app/public'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof AppPublicRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/media': {
      id: '/_app/media'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof AppMediaRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/feed': {
      id: '/_app/feed'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof AppFeedRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsRouteRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_public/signin/': {
      id: '/_public/signin/'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof PublicSigninIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_app/type/$type': {
      id: '/_app/type/$type'
      path: '/type/$type'
      fullPath: '/type/$type'
      preLoaderRoute: typeof AppTypeTypeRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/tag/$tag': {
      id: '/_app/tag/$tag'
      path: '/tag/$tag'
      fullPath: '/tag/$tag'
      preLoaderRoute: typeof AppTagTagRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/tags': {
      id: '/_app/settings/tags'
      path: '/tags'
      fullPath: '/settings/tags'
      preLoaderRoute: typeof AppSettingsTagsRouteImport
      parentRoute: typeof AppSettingsRouteRoute
    }
    '/_app/settings/integrations': {
      id: '/_app/settings/integrations'
      path: '/integrations'
      fullPath: '/settings/integrations'
      preLoaderRoute: typeof AppSettingsIntegrationsRouteImport
      parentRoute: typeof AppSettingsRouteRoute
    }
    '/_app/settings/account': {
      id: '/_app/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof AppSettingsAccountRouteImport
      parentRoute: typeof AppSettingsRouteRoute
    }
    '/_app/new/bookmark': {
      id: '/_app/new/bookmark'
      path: '/new/bookmark'
      fullPath: '/new/bookmark'
      preLoaderRoute: typeof AppNewBookmarkRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/collection/$collection': {
      id: '/_app/collection/$collection'
      path: '/collection/$collection'
      fullPath: '/collection/$collection'
      preLoaderRoute: typeof AppCollectionCollectionRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/bookmark/$id': {
      id: '/_app/bookmark/$id'
      path: '/bookmark/$id'
      fullPath: '/bookmark/$id'
      preLoaderRoute: typeof AppBookmarkIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/bookmark/$id/edit': {
      id: '/_app/bookmark/$id/edit'
      path: '/edit'
      fullPath: '/bookmark/$id/edit'
      preLoaderRoute: typeof AppBookmarkIdEditRouteImport
      parentRoute: typeof AppBookmarkIdRoute
    }
  }
}

interface AppSettingsRouteRouteChildren {
  AppSettingsAccountRoute: typeof AppSettingsAccountRoute
  AppSettingsIntegrationsRoute: typeof AppSettingsIntegrationsRoute
  AppSettingsTagsRoute: typeof AppSettingsTagsRoute
}

const AppSettingsRouteRouteChildren: AppSettingsRouteRouteChildren = {
  AppSettingsAccountRoute: AppSettingsAccountRoute,
  AppSettingsIntegrationsRoute: AppSettingsIntegrationsRoute,
  AppSettingsTagsRoute: AppSettingsTagsRoute,
}

const AppSettingsRouteRouteWithChildren =
  AppSettingsRouteRoute._addFileChildren(AppSettingsRouteRouteChildren)

interface AppBookmarkIdRouteChildren {
  AppBookmarkIdEditRoute: typeof AppBookmarkIdEditRoute
}

const AppBookmarkIdRouteChildren: AppBookmarkIdRouteChildren = {
  AppBookmarkIdEditRoute: AppBookmarkIdEditRoute,
}

const AppBookmarkIdRouteWithChildren = AppBookmarkIdRoute._addFileChildren(
  AppBookmarkIdRouteChildren,
)

interface AppRouteRouteChildren {
  AppSettingsRouteRoute: typeof AppSettingsRouteRouteWithChildren
  AppDashboardRoute: typeof AppDashboardRoute
  AppFeedRoute: typeof AppFeedRoute
  AppMediaRoute: typeof AppMediaRoute
  AppPublicRoute: typeof AppPublicRoute
  AppSearchRoute: typeof AppSearchRoute
  AppStarsRoute: typeof AppStarsRoute
  AppTootsRoute: typeof AppTootsRoute
  AppTopRoute: typeof AppTopRoute
  AppTrashRoute: typeof AppTrashRoute
  AppTweetsRoute: typeof AppTweetsRoute
  AppBookmarkIdRoute: typeof AppBookmarkIdRouteWithChildren
  AppCollectionCollectionRoute: typeof AppCollectionCollectionRoute
  AppNewBookmarkRoute: typeof AppNewBookmarkRoute
  AppTagTagRoute: typeof AppTagTagRoute
  AppTypeTypeRoute: typeof AppTypeTypeRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppSettingsRouteRoute: AppSettingsRouteRouteWithChildren,
  AppDashboardRoute: AppDashboardRoute,
  AppFeedRoute: AppFeedRoute,
  AppMediaRoute: AppMediaRoute,
  AppPublicRoute: AppPublicRoute,
  AppSearchRoute: AppSearchRoute,
  AppStarsRoute: AppStarsRoute,
  AppTootsRoute: AppTootsRoute,
  AppTopRoute: AppTopRoute,
  AppTrashRoute: AppTrashRoute,
  AppTweetsRoute: AppTweetsRoute,
  AppBookmarkIdRoute: AppBookmarkIdRouteWithChildren,
  AppCollectionCollectionRoute: AppCollectionCollectionRoute,
  AppNewBookmarkRoute: AppNewBookmarkRoute,
  AppTagTagRoute: AppTagTagRoute,
  AppTypeTypeRoute: AppTypeTypeRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
  PublicSigninIndexRoute: typeof PublicSigninIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
  PublicSigninIndexRoute: PublicSigninIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
